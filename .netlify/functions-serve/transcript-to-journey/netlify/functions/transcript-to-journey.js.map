{
  "version": 3,
  "sources": ["../../../../../../../Users/nikiforecast/Documents/KYP/KYP/netlify/functions/transcript-to-journey.js"],
  "sourceRoot": "/private/var/folders/8q/qd3vlb616ks7vc223bgfxpjc0000gn/T/tmp-83293-7nEUtcwuMT8R",
  "sourcesContent": ["export async function handler(event, context) {\n  // Enable CORS\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n  }\n\n  // Handle preflight\n  if (event.httpMethod === 'OPTIONS') {\n    return { statusCode: 200, headers, body: '' }\n  }\n\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({ error: 'Method not allowed' }),\n    }\n  }\n\n  try {\n    const { transcript, prompt } = JSON.parse(event.body || '{}')\n\n    if (!transcript || transcript.trim() === '') {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ error: 'Transcript is required' }),\n      }\n    }\n\n    const apiKey = process.env.OPENAI_API_KEY\n    if (!apiKey) {\n      console.error('OPENAI_API_KEY not configured')\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ error: 'OpenAI API key not configured. Please add OPENAI_API_KEY to your environment variables.' }),\n      }\n    }\n\n    console.log('Calling OpenAI API...')\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: 'gpt-4-turbo-preview',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a user journey mapping expert. You extract user journeys from transcripts and return valid JSON only. Never include markdown code blocks or explanations.'\n          },\n          {\n            role: 'user',\n            content: `${prompt}\\n\\nTranscript:\\n${transcript}`\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 4000,\n        response_format: { type: 'json_object' }\n      })\n    })\n\n    if (!response.ok) {\n      const errorData = await response.json()\n      console.error('OpenAI API error:', errorData)\n      return {\n        statusCode: response.status,\n        headers,\n        body: JSON.stringify({ \n          error: 'OpenAI API error',\n          details: errorData\n        }),\n      }\n    }\n\n    const data = await response.json()\n    const content = data.choices[0].message.content\n\n    let journeyData\n\n    try {\n      // Remove any markdown code blocks if present\n      let cleanContent = content.trim()\n      if (cleanContent.startsWith('```json')) {\n        cleanContent = cleanContent.replace(/```json\\n?/g, '').replace(/```\\n?$/g, '')\n      } else if (cleanContent.startsWith('```')) {\n        cleanContent = cleanContent.replace(/```\\n?/g, '')\n      }\n      \n      journeyData = JSON.parse(cleanContent)\n    } catch (parseError) {\n      console.error('Failed to parse OpenAI response:', content)\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ \n          error: 'Failed to parse AI response',\n          rawResponse: content\n        }),\n      }\n    }\n\n    // Validate the structure\n    if (!journeyData.nodes || !Array.isArray(journeyData.nodes) || journeyData.nodes.length === 0) {\n      return {\n        statusCode: 500,\n        headers,\n        body: JSON.stringify({ \n          error: 'Invalid journey structure: missing or empty nodes',\n          data: journeyData\n        }),\n      }\n    }\n\n    if (!journeyData.edges || !Array.isArray(journeyData.edges)) {\n      journeyData.edges = []\n    }\n\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        success: true,\n        journey: journeyData,\n        usage: data.usage\n      }),\n    }\n\n  } catch (error) {\n    console.error('Transcript to journey error:', error)\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ \n        error: 'Internal server error',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      }),\n    }\n  }\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,QAAQ,OAAO,SAAS;AAE5C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO,EAAE,YAAY,KAAK,SAAS,MAAM,GAAG;AAAA,EAC9C;AAEA,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAEA,MAAI;AACF,UAAM,EAAE,YAAY,OAAO,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AAE5D,QAAI,CAAC,cAAc,WAAW,KAAK,MAAM,IAAI;AAC3C,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,yBAAyB,CAAC;AAAA,MAC1D;AAAA,IACF;AAEA,UAAM,SAAS,QAAQ,IAAI;AAC3B,QAAI,CAAC,QAAQ;AACX,cAAQ,MAAM,+BAA+B;AAC7C,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,0FAA0F,CAAC;AAAA,MAC3H;AAAA,IACF;AAEA,YAAQ,IAAI,uBAAuB;AACnC,UAAM,WAAW,MAAM,MAAM,8CAA8C;AAAA,MACzE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB,UAAU,MAAM;AAAA,MACnC;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,UACX;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,SAAS,GAAG,MAAM;AAAA;AAAA;AAAA,EAAoB,UAAU;AAAA,UAClD;AAAA,QACF;AAAA,QACA,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,iBAAiB,EAAE,MAAM,cAAc;AAAA,MACzC,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,YAAY,MAAM,SAAS,KAAK;AACtC,cAAQ,MAAM,qBAAqB,SAAS;AAC5C,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,UACP,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAM,UAAU,KAAK,QAAQ,CAAC,EAAE,QAAQ;AAExC,QAAI;AAEJ,QAAI;AAEF,UAAI,eAAe,QAAQ,KAAK;AAChC,UAAI,aAAa,WAAW,SAAS,GAAG;AACtC,uBAAe,aAAa,QAAQ,eAAe,EAAE,EAAE,QAAQ,YAAY,EAAE;AAAA,MAC/E,WAAW,aAAa,WAAW,KAAK,GAAG;AACzC,uBAAe,aAAa,QAAQ,WAAW,EAAE;AAAA,MACnD;AAEA,oBAAc,KAAK,MAAM,YAAY;AAAA,IACvC,SAAS,YAAY;AACnB,cAAQ,MAAM,oCAAoC,OAAO;AACzD,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,UACP,aAAa;AAAA,QACf,CAAC;AAAA,MACH;AAAA,IACF;AAGA,QAAI,CAAC,YAAY,SAAS,CAAC,MAAM,QAAQ,YAAY,KAAK,KAAK,YAAY,MAAM,WAAW,GAAG;AAC7F,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,UACP,MAAM;AAAA,QACR,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,CAAC,YAAY,SAAS,CAAC,MAAM,QAAQ,YAAY,KAAK,GAAG;AAC3D,kBAAY,QAAQ,CAAC;AAAA,IACvB;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,KAAK;AAAA,MACd,CAAC;AAAA,IACH;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,gCAAgC,KAAK;AACnD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MACpD,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
